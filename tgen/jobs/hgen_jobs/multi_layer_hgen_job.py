from copy import deepcopy
from typing import List

from tgen.data.clustering.supported_clustering_method import SupportedClusteringMethod
from tgen.data.tdatasets.prompt_dataset import PromptDataset
from tgen.data.tdatasets.trace_dataset import TraceDataset
from tgen.hgen.hgen_args import HGenArgs
from tgen.jobs.abstract_job import AbstractJob
from tgen.jobs.components.args.job_args import JobArgs
from tgen.jobs.hgen_jobs.base_hgen_job import BaseHGenJob
from tgen.util.logging.logger_manager import logger
from tgen.util.status import Status


class MultiLayerHGenJob(AbstractJob):

    def __init__(self, starting_hgen_job: BaseHGenJob, target_types: List[str], job_args: JobArgs = None):
        """
        Initializes the job with args needed for hierarchy generator
        :param starting_hgen_job: The initial hgen job to run to get the first layer of artifacts
        :param target_types: The list of target types going up the hierarchy
        :param job_args: The arguments need for the job
        """
        self.starting_hgen_job = starting_hgen_job
        if self.starting_hgen_job.get_hgen_args().target_type == target_types[0]:  # target types should not include start target type
            target_types.pop(0)
        self.target_types = target_types
        super().__init__(job_args)

    def _run(self) -> TraceDataset:
        """
        Runs all the hgen jobs, slowly progressing up the hierarchy
        :return: The final dataset created by the top level hgen job
        """
        current_hgen_job = self.starting_hgen_job
        for i, next_target_type in enumerate(self.target_types):
            current_hgen_job.result.experimental_vars = {"target_type": current_hgen_job.get_hgen_args().target_type}
            res = current_hgen_job.run()
            if res.status != Status.SUCCESS:
                raise Exception(res.body)
            current_hgen_job = self.get_next_hgen_job(current_hgen_job, next_target_type, res.body)
        return current_hgen_job.run().body

    @staticmethod
    def get_next_hgen_job(current_hgen_job: BaseHGenJob, next_target_type: str, generated_dataset: TraceDataset) -> BaseHGenJob:
        """
        Gets the next hgen job to progress up the hierarchy
        :param current_hgen_job: The last hgen job that run
        :param next_target_type: The next target type to create with the new hgen job
        :param generated_dataset: The dataset generated by the last hgen job run
        :return: The next hgen job
        """
        current_args = current_hgen_job.get_hgen_args()
        if current_args.clustering_method != SupportedClusteringMethod.LLM:
            logger.warn(f"{current_args.clustering_method} for higher level artifact generation is not currently supported. Using "
                        f"{SupportedClusteringMethod.LLM.name} instead")
        hgen_args = HGenArgs(source_layer_id=current_args.target_type, target_type=next_target_type,
                             dataset_for_sources=PromptDataset(trace_dataset=generated_dataset),
                             clustering_method=SupportedClusteringMethod.LLM, clustering_params=current_args.clustering_params,
                             export_path=current_args.export_path)
        return BaseHGenJob(current_hgen_job.llm_manager, current_hgen_job.job_args, hgen_args)
