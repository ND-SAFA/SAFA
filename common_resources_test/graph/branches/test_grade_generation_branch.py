from common_resources.graph.branches.grade_generation_branch import GradeGenerationBranch
from common_resources.graph.nodes.supported_nodes import SupportedNodes
from common_resources.mocking.langchain.mock_chat_model_decorator import mock_chat_model
from common_resources.mocking.langchain.test_chat_model import TestResponseManager
from common_resources_test.base_tests.base_test import BaseTest
from common_resources_test.graph.graph_test_util import get_io_without_data


class TestGradeGenerationBranch(BaseTest):

    @mock_chat_model
    def test_perform_action_good_generation(self, test_manager: TestResponseManager):
        self.assert_selection("yes", SupportedNodes.END_COMMAND, test_manager)

    @mock_chat_model
    def test_perform_action_bad_generation(self, test_manager: TestResponseManager):
        self.assert_selection("no", SupportedNodes.GENERATE, test_manager)

    def assert_selection(self, res: str, expected_selection: SupportedNodes, test_manager: TestResponseManager):
        args, state = get_io_without_data(generation="This is generated by the LLM",
                                          user_question="This is a user question")
        response_model = GradeGenerationBranch(graph_args=args).get_agent().create_response_obj(res)
        test_manager.set_responses([response_model])

        selection = GradeGenerationBranch(args).perform_action(state)
        self.assertEqual(selection, expected_selection.name)
