buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'nebula.lint' version '17.0.0'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '1.0.1'
    id "io.freefair.lombok" version "4.1.6"
}

bootJar {
    archivesBaseName = 'edu.nd.crc.safa'
    archiveVersion = '0.1.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // data parsing
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'commons-io:commons-io:2.11.0' // TODO: Upgrade contains breaking changes
    implementation 'org.json:json:20220320'

    // cloud storage
    implementation 'com.google.cloud:google-cloud-storage:2.11.3'
    implementation 'com.google.api-client:google-api-client:1.35.2'


    // database
    implementation 'mysql:mysql-connector-java:8.0.29'
    implementation 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.6.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.hibernate:hibernate-core:5.6.1.Final' // TODO: Upgrading contains breaking changes
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.flywaydb:flyway-core:9.0.4'
    implementation 'org.flywaydb:flyway-mysql:9.1.2'

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.2'
    implementation 'org.springframework.data:spring-data-commons:2.7.2'
    implementation 'org.springframework.data:spring-data-jpa:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.2'
    implementation 'org.springframework:spring-websocket:5.3.22'
    implementation 'org.springframework:spring-messaging:5.3.22'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.7.2'
    implementation 'org.springframework.security:spring-security-messaging:5.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.2'
    implementation 'org.springframework.batch:spring-batch-core:4.3.6'

    // authentication
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-orgjson:0.11.5'

    // websockets
    implementation 'org.webjars:sockjs-client:1.5.1'
    implementation 'org.webjars:stomp-websocket:2.3.4'

    // automatic documentation
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9' // Creates swagger ui
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0' // Parses javadoc
    implementation 'org.springdoc:springdoc-openapi-javadoc:1.6.9' // Adds javadoc to swagger docs

    // layout generation
    implementation 'org.eclipse.elk:org.eclipse.elk.core:0.8.1'
    implementation 'org.eclipse.elk:org.eclipse.elk.alg.mrtree:0.8.1'

    // testing
    implementation 'org.springframework.boot:spring-boot-starter-test:2.7.2'
    testImplementation 'com.h2database:h2:2.1.210' // Most up-to-date version compatible with flyway
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.springframework.security:spring-security-test:5.7.2'
    testImplementation 'org.mockito:mockito-core:4.7.0'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.12.13'
    implementation 'net.bytebuddy:byte-buddy:1.12.13'
}

test {
    doFirst {
        systemProperty 'spring.profiles.active', 'test'
    }

    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

/*
 * CI/CD
 */
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "edu/**/importer/JIRA.class",
                    "edu/**/importer/Puller.class",
                    "edu/**/builders/AppEntityBuilder.class",
                    "edu/**/importer/DbEntityBuilder.class",
            ])
        }))
    }
}

checkstyle {
    toolVersion = '8.45'
    configFile = file('checkstyle.xml')
}

checkstyleMain {
    source = 'src/main/java'
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleTest {
    source = 'src/test/'
}
