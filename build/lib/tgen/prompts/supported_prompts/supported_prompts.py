from copy import deepcopy
from types import DynamicClassAttribute

from common_resources.llm.prompts.prompt import Prompt
from common_resources.tools.util.supported_enum import SupportedEnum

from tgen.prompts.supported_prompts.artifact_summary_prompts import CODE_SUMMARY, NL_SUMMARY
from tgen.prompts.supported_prompts.chunk_prompts import CHUNK_PROMPT
from tgen.prompts.supported_prompts.classification_prompts import CLASSIFICATION_QUESTIONNAIRE
from tgen.prompts.supported_prompts.concept_prompts import ENTITY_EXTRACTION_PROMPT
from tgen.prompts.supported_prompts.contradiction_prompts import CONTRADICTIONS_TASK_PROMPT, EXTRACT_CONSTITUENTS_PROMPT
from tgen.prompts.supported_prompts.delta_prompts import ADDED_PROMPT, CHANGE_SUMMARY_QUESTIONNAIRE, CHANGE_SUMMARY_STARTER_PROMPT, \
    DELETED_PROMPT, DIFF_SUMMARY_QUESTIONNAIRE, DIFF_SUMMARY_STARTER_PROMPT, IMPACTS_PROMPT
from tgen.prompts.supported_prompts.explanation_prompts import EXPLANATION_GOAL, EXPLANATION_TASK_QUESTIONNAIRE
from tgen.prompts.supported_prompts.hgen_prompts import CLUSTERING_QUESTIONNAIRE, DUP_SUMMARY_TASKS, FORMAT_QUESTIONNAIRE, \
    GENERATATION_QUESTIONNAIRE, GENERATION_PROMPT, INSTRUCTION_CREATION_PROMPT, REFINEMENT_QUESTIONNAIRE, REFINE_OVERVIEW_PROMPT, \
    SEED_PROMPT, SUMMARY_QUESTIONNAIRE, TITLE_PROMPT
from tgen.prompts.supported_prompts.project_summary_prompts import DATA_FLOW_SECTION_PROMPT, ENTITIES_SECTION_PROMPT, \
    FEATURE_SECTION_PROMPT, OVERVIEW_SECTION_PROMPT, PROJECT_SUMMARY_CONTEXT_PROMPT_ARTIFACTS, PROJECT_SUMMARY_CONTEXT_PROMPT_VERSIONS, \
    SUBSYSTEM_SECTION_PROMPT
from tgen.prompts.supported_prompts.tracing_prompts import QUESTION1, QUESTION2, RANKING_GOAL


class SupportedPrompts(SupportedEnum):
    # ---------- HGEN ----------------
    HGEN_INSTRUCTIONS = INSTRUCTION_CREATION_PROMPT
    HGEN_GENERATION = GENERATION_PROMPT
    HGEN_GENERATION_QUESTIONNAIRE = GENERATATION_QUESTIONNAIRE
    HGEN_CLUSTERING_QUESTIONNAIRE = CLUSTERING_QUESTIONNAIRE
    HGEN_REFINEMENT = REFINE_OVERVIEW_PROMPT
    HGEN_DUP_SUMMARY_TASKS = DUP_SUMMARY_TASKS
    HGEN_REFINEMENT_QUESTIONNAIRE = REFINEMENT_QUESTIONNAIRE
    HGEN_FORMAT_QUESTIONNAIRE = FORMAT_QUESTIONNAIRE
    HGEN_SUMMARY_QUESTIONNAIRE = SUMMARY_QUESTIONNAIRE
    HGEN_SEED_PROMPT = SEED_PROMPT
    HGEN_TITLE_PROMPT = TITLE_PROMPT

    # ---------- TGEN ----------------
    TGEN_CLASSIFICATION = CLASSIFICATION_QUESTIONNAIRE

    # ---------- SUMMARY ----------------
    CODE_SUMMARY = CODE_SUMMARY
    NL_SUMMARY = NL_SUMMARY

    PROJECT_SUMMARY_CONTEXT_ARTIFACTS = PROJECT_SUMMARY_CONTEXT_PROMPT_ARTIFACTS
    PROJECT_SUMMARY_CONTEXT_VERSIONS = PROJECT_SUMMARY_CONTEXT_PROMPT_VERSIONS
    PROJECT_OVERVIEW_SECTION = OVERVIEW_SECTION_PROMPT
    PROJECT_FEATURE_SECTION = FEATURE_SECTION_PROMPT
    PROJECT_ENTITIES_SECTION = ENTITIES_SECTION_PROMPT
    PROJECT_SUBSYSTEM_SECTION = SUBSYSTEM_SECTION_PROMPT
    PROJECT_DATA_FLOW_SECTION = DATA_FLOW_SECTION_PROMPT

    # ---------- DELTA ----------------
    DIFF_SUMMARY_QUESTIONNAIRE = DIFF_SUMMARY_QUESTIONNAIRE
    DIFF_SUMMARY_STARTER = DIFF_SUMMARY_STARTER_PROMPT
    DELTA_CHANGE_SUMMARY_STARTER = CHANGE_SUMMARY_STARTER_PROMPT
    DELTA_CHANGE_SUMMARY_QUESTIONNAIRE = CHANGE_SUMMARY_QUESTIONNAIRE
    DELTA_IMPACTS = IMPACTS_PROMPT
    DELTA_NEW_FILE = ADDED_PROMPT
    DELTA_REMOVED_FILE = DELETED_PROMPT

    # ---------- RANKING ----------------
    RANKING_GOAL_INSTRUCTIONS = RANKING_GOAL
    RANKING_QUESTION1 = QUESTION1
    RANKING_QUESTION2 = QUESTION2

    EXPLANATIONS_GOAL_INSTRUCTIONS = EXPLANATION_GOAL
    EXPLANATION_TASK = EXPLANATION_TASK_QUESTIONNAIRE

    # ---------- REQ CONTRADICTION ANALYSIS ----------------
    REQUIREMENT_EXTRACT_CONSTITUENTS = EXTRACT_CONSTITUENTS_PROMPT
    CONTRADICTIONS_TASK = CONTRADICTIONS_TASK_PROMPT

    # ---------- ARTIFACT CHUNKING ----------------
    CHUNK_INSTRUCTIONS = CHUNK_PROMPT

    # ---------- CONCEPTS ----------
    CONCEPT_ENTITY_EXTRACTION = ENTITY_EXTRACTION_PROMPT

    @DynamicClassAttribute
    def value(self) -> Prompt:
        """Overrides getting the value of the Enum member to return a copy."""
        return deepcopy(self._value_)
