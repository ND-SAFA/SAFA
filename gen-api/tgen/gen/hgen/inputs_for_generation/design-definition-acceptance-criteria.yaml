description:
- A Design description with acceptance criteria is a software development artifact
  that outlines the detailed design of a specific feature or functionality, along
  with the criteria that must be met for the feature to be considered complete and
  acceptable. This artifact is different from other software artifacts, such as requirements
  documents or user stories, as it focuses on the design and implementation details,
  as well as the conditions that must be satisfied for the feature to be considered
  successful.
example:
- '

  Feature: User Authentication


  Design Description:

  The system shall provide a secure user authentication mechanism that allows users
  to log in using their email address and password. The authentication process will
  involve the following steps:

  1. The user enters their email address and password on the login page.

  2. The system validates the email address format and checks if the email address
  exists in the database.

  3. If the email address is valid and exists, the system compares the entered password
  with the stored password hash.

  4. If the password matches, the user is granted access to the system and redirected
  to their dashboard.


  Acceptance Criteria:

  1. The login page shall display input fields for email address and password.

  2. The system shall validate the email address format and display an error message
  if the format is incorrect.

  3. The system shall check if the email address exists in the database and display
  an error message if it does not.

  4. The system shall compare the entered password with the stored password hash and
  display an error message if they do not match.

  5. If the email address and password are valid, the user shall be granted access
  to the system and redirected to their dashboard.

  '
format:
- 'Feature: [Feature Name]  Design Description: [Provide a detailed description of
  the feature or functionality, including the steps involved in its implementation.]  Acceptance
  Criteria: 1. [List the first condition that must be met for the feature to be considered
  complete and acceptable.] 2. [List the second condition that must be met for the
  feature to be considered complete and acceptable.] 3. [Continue listing conditions
  as necessary.]'
questions:
- - What are the main classes/components in the code and how do they interact with
    each other?
  - What are the key functions/methods in each class/component?
  - What inputs does each function/method take? What does it return?
  - Are there any major control flows like if/else or switch statements? What do they
    control?
  - Are there any loops? What do they iterate over?
  - Are there any global variables? What is their purpose?
  - Are there any major data structures? What do they represent?
  - Are there any external services/databases that the code interacts with? What are
    they used for?
  - Are there any configuration files? What can be configured?
  - Are there any logging or instrumentation statements? What events do they capture?
