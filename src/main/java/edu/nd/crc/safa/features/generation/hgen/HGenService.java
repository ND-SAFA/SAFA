package edu.nd.crc.safa.features.generation.hgen;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import edu.nd.crc.safa.features.artifacts.entities.ArtifactAppEntity;
import edu.nd.crc.safa.features.artifacts.services.ArtifactService;
import edu.nd.crc.safa.features.commits.entities.app.ProjectCommit;
import edu.nd.crc.safa.features.commits.services.CommitService;
import edu.nd.crc.safa.features.common.SafaRequestBuilder;
import edu.nd.crc.safa.features.delta.entities.db.ModificationType;
import edu.nd.crc.safa.features.generation.summary.TGenSummaryArtifact;
import edu.nd.crc.safa.features.generation.summary.TGenSummaryArtifactType;
import edu.nd.crc.safa.features.generation.tgen.TGen;
import edu.nd.crc.safa.features.generation.tgen.TGenDataset;
import edu.nd.crc.safa.features.generation.tgen.entities.TGenLink;
import edu.nd.crc.safa.features.traces.entities.app.TraceAppEntity;
import edu.nd.crc.safa.features.users.services.SafaUserService;
import edu.nd.crc.safa.features.versions.entities.ProjectVersion;
import edu.nd.crc.safa.utilities.ProjectDataStructures;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

/**
 * Provides API for generating hierarchy of artifacts.
 */
@AllArgsConstructor
@Service
public class HGenService {
    private final String HGEN_SOURCE_NAME = "source_layer";
    ArtifactService artifactService;
    CommitService commitService;
    SafaUserService safaUserService;
    SafaRequestBuilder safaRequestBuilder;

    /**
     * Generates artifacts for each cluster defined.
     *
     * @param projectVersion The version to retrieve artifacts in.
     * @param request        The request defining artifacts, clusters, and model.
     * @return List of generated artifacts.
     */
    public ProjectCommit generateHierarchy(ProjectVersion projectVersion, HGenRequest request) {
        List<String> targetTypes = request.getTargetTypes();
        TGen controller = new TGen(safaRequestBuilder);

        List<ArtifactAppEntity> sourceArtifacts = artifactService.getAppEntities(projectVersion);
        List<TGenSummaryArtifact> artifacts = toHGenArtifacts(sourceArtifacts, request.getArtifacts());
        TGenHGenRequest tgenRequest = new TGenHGenRequest(artifacts, targetTypes);
        TGenDataset dataset = controller.generateHierarchy(tgenRequest);
        ProjectCommit projectCommit = createHGenCommit(sourceArtifacts, dataset, targetTypes);
        projectCommit.setCommitVersion(projectVersion);

        return projectCommit;
    }

    /**
     * Reads dataset generated by HGEN and creates commit to save entities.
     *
     * @param sourceArtifacts The artifacts sent to HGEN.
     * @param dataset         The dataset response of HGEN.
     * @param targetTypes     The target type of artifacts.
     * @return The project commit containing generated entities
     */
    private ProjectCommit createHGenCommit(List<ArtifactAppEntity> sourceArtifacts,
                                           TGenDataset dataset,
                                           List<String> targetTypes) {
        ProjectCommit projectCommit = new ProjectCommit();
        Map<UUID, ArtifactAppEntity> artifactMap = ProjectDataStructures.createArtifactMap(sourceArtifacts);

        for (String targetType : targetTypes) {
            List<ArtifactAppEntity> artifactsGenerated = toArtifacts(
                dataset.getArtifactLayers().get(targetType), targetType);
            projectCommit.addArtifacts(ModificationType.ADDED, artifactsGenerated);
        }

        if (dataset.getTrueLinks() != null) {
            List<TraceAppEntity> generatedTraces = toTraces(dataset.getTrueLinks(), artifactMap);
            projectCommit.addTraces(ModificationType.ADDED, generatedTraces);
        }

        return projectCommit;
    }

    /**
     * Converts HGen traces to trace app entities.
     *
     * @param links       The links established by HGEN.
     * @param artifactMap The map of source artifacts.
     * @return Trace entities.
     */
    private List<TraceAppEntity> toTraces(List<TGenLink> links,
                                          Map<UUID, ArtifactAppEntity> artifactMap) {
        return links.stream().map(t -> {
            String sourceId = t.getSource();
            String targetName = t.getTarget();
            TraceAppEntity traceAppEntity = new TraceAppEntity();
            ArtifactAppEntity sourceArtifact = artifactMap.get(UUID.fromString(sourceId));
            traceAppEntity.setSourceName(sourceArtifact.getName());
            traceAppEntity.setTargetName(targetName);
            traceAppEntity.asGeneratedTrace(t.getScore());
            return traceAppEntity;
        }).collect(Collectors.toList());
    }

    /**
     * Converts HGen artifacts to artifact entities.
     *
     * @param generatedArtifacts The generated artifacts by HGEN.
     * @param targetType         The target type of the artifacts.
     * @return Converted artifacts.
     */
    private List<ArtifactAppEntity> toArtifacts(Map<String, String> generatedArtifacts,
                                                String targetType) {
        return generatedArtifacts.entrySet().stream()
            .map(entry -> {
                ArtifactAppEntity artifact = new ArtifactAppEntity();
                artifact.setName(entry.getKey());
                artifact.setType(targetType);
                artifact.setBody(entry.getValue());
                return artifact;
            }).collect(Collectors.toList());
    }

    /**
     * Converts artifacts to HGEN format.
     *
     * @param artifacts   The project artifacts to query from.
     * @param artifactIds The IDs of the artifacts to prepare.
     * @return List of prepared artifacts for HGEN.
     */
    private List<TGenSummaryArtifact> toHGenArtifacts(List<ArtifactAppEntity> artifacts,
                                                      List<UUID> artifactIds) {
        List<TGenSummaryArtifact> preparedArtifacts = new ArrayList<>();
        Set<UUID> artifactIdSet = new HashSet<>(artifactIds);
        artifacts.stream()
            .filter(a -> artifactIdSet.contains(a.getId()))
            .forEach(a -> {
                TGenSummaryArtifactType chunkerType = TGenSummaryArtifactType.getArtifactType(a.getName());
                preparedArtifacts.add(new TGenSummaryArtifact(
                    a.getId().toString(), a.getName(), a.getBody(), chunkerType));
            });
        return preparedArtifacts;
    }
}
