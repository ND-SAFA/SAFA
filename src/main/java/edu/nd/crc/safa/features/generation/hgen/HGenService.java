package edu.nd.crc.safa.features.generation.hgen;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import edu.nd.crc.safa.features.artifacts.entities.ArtifactAppEntity;
import edu.nd.crc.safa.features.artifacts.services.ArtifactService;
import edu.nd.crc.safa.features.commits.entities.app.ProjectCommit;
import edu.nd.crc.safa.features.delta.entities.db.ModificationType;
import edu.nd.crc.safa.features.generation.api.GenerationApi;
import edu.nd.crc.safa.features.generation.common.GenerationArtifact;
import edu.nd.crc.safa.features.generation.common.GenerationDataset;
import edu.nd.crc.safa.features.generation.common.GenerationLink;
import edu.nd.crc.safa.features.jobs.logging.JobLogger;
import edu.nd.crc.safa.features.traces.entities.app.TraceAppEntity;
import edu.nd.crc.safa.features.versions.entities.ProjectVersion;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

/**
 * Provides API for generating hierarchy of artifacts.
 */
@AllArgsConstructor
@Service
public class HGenService {
    private final GenerationApi generationApi;
    private final ArtifactService artifactService;

    /**
     * Generates artifacts for each cluster defined.
     *
     * @param projectVersion The version to retrieve artifacts in.
     * @param request        The request defining artifacts, clusters, and model.
     * @return List of generated artifacts.
     */
    public ProjectCommit generateHierarchy(ProjectVersion projectVersion, HGenRequest request, JobLogger jobLogger) {
        List<String> targetTypes = request.getTargetTypes();

        List<ArtifactAppEntity> sourceArtifacts = this.artifactService.getAppEntities(projectVersion);
        List<GenerationArtifact> artifacts = toHGenArtifacts(sourceArtifacts, request.getArtifacts());
        TGenHGenRequest tgenRequest = new TGenHGenRequest(artifacts, targetTypes, request.getSummary());

        GenerationDataset dataset = generationApi.generateHierarchy(tgenRequest, jobLogger);
        ProjectCommit projectCommit = createHGenCommit(dataset, targetTypes);
        projectCommit.setCommitVersion(projectVersion);

        return projectCommit;
    }

    /**
     * Reads dataset generated by HGEN and creates commit to save entities.
     *
     * @param dataset     The dataset response of HGEN.
     * @param targetTypes The target type of artifacts.
     * @return The project commit containing generated entities
     */
    private ProjectCommit createHGenCommit(GenerationDataset dataset,
                                           List<String> targetTypes) {
        ProjectCommit projectCommit = new ProjectCommit();

        for (String targetType : targetTypes) {
            List<ArtifactAppEntity> artifactsGenerated = dataset.getArtifacts(targetType)
                .stream().map(ArtifactAppEntity::new).collect(Collectors.toList());
            projectCommit.addArtifacts(ModificationType.ADDED, artifactsGenerated);
        }

        if (dataset.getLinks() != null) {
            List<TraceAppEntity> generatedTraces = toTraces(dataset.getLinks());
            projectCommit.addTraces(ModificationType.ADDED, generatedTraces);
        }

        return projectCommit;
    }

    /**
     * Converts HGen traces to trace app entities.
     *
     * @param links The links established by HGEN.
     * @return Trace entities.
     */
    private List<TraceAppEntity> toTraces(List<GenerationLink> links) {
        return links.stream().map(t -> {
            String sourceName = t.getSource();
            String targetName = t.getTarget();
            TraceAppEntity traceAppEntity = new TraceAppEntity();
            traceAppEntity.setSourceName(sourceName);
            traceAppEntity.setTargetName(targetName);
            traceAppEntity.asGeneratedTrace(t.getScore());
            traceAppEntity.setExplanation(t.getExplanation());
            return traceAppEntity;
        }).collect(Collectors.toList());
    }

    /**
     * Converts artifacts to HGEN format.
     *
     * @param artifacts   The project artifacts to query from.
     * @param artifactIds The IDs of the artifacts to prepare.
     * @return List of prepared artifacts for HGEN.
     */
    private List<GenerationArtifact> toHGenArtifacts(List<ArtifactAppEntity> artifacts,
                                                     List<UUID> artifactIds) {
        List<GenerationArtifact> preparedArtifacts = new ArrayList<>();
        Set<UUID> artifactIdSet = new HashSet<>(artifactIds);
        artifacts.stream()
            .filter(a -> artifactIdSet.contains(a.getId()))
            .forEach(a -> {
                preparedArtifacts.add(new GenerationArtifact(a));
            });
        return preparedArtifacts;
    }
}
