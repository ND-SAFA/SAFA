import { ArtifactSchema, IconVariant, ThemeColor } from "@/types";

/**
 * Represents the type of user comment on an artifact.
 */
export type CommentType =
  | "conversation" // user comment.
  | "flag" // user defined warning / health checks.
  | "cited_concept" // concept was cited in artifact.
  | "predicted_concept" // concept was not cited, but predicted to be used in artifact.
  | "undefined_concept" // concept used in artifact, but not found in `Concept` types.
  | "multi_matched_concept" // multiple concepts were matched to text in artifact.
  | "contradiction"; // artifact found to contradict with set of other artifacts

/**
 * Represents the status of a user comment on an artifact.
 */
export type CommentStatus = "active" | "resolved";

/**
 * Represents a user comment on an artifact.
 */
export interface CommentSchema {
  /**
   * Unique identifier for the comment.
   */
  id: string;
  /**
   * The content of the comment.
   */
  content: string;
  /**
   * The project version the comment is associated with.
   */
  versionId: string;
  /**
   * The user who published the comment.
   * If empty, the comment was generated by SAFA.
   */
  userId?: string;
  /**
   * The status of the comment.
   */
  status: CommentStatus;
  /**
   * The type of the comment.
   */
  type: CommentType;
  /**
   * The date and time the comment was created.
   */
  createdAt: string;
  /**
   * The date and time the comment was last edited.
   */
  updatedAt: string;
}

/**
 * Represents a basic health check with no additional information.
 */
export interface BasicCommentSchema extends CommentSchema {
  type: "conversation" | "flag";
}

/**
 * Represents a health check on an artifact based on a mentioned concept.
 */
interface MatchedConceptHealthCheckSchema extends CommentSchema {
  type: "cited_concept" | "predicted_concept";
  /**
   * The artifact id of the related concept
   */
  conceptArtifactId: string;
}

/**
 * Represents an artifact that has an undefined concept.
 */
interface UndefinedConceptHealthCheck extends CommentSchema {
  type: "undefined_concept";
  /**
   * The name of the undefined concept.
   */
  undefinedConcept: string;
}

/**
 * Represents a health check on an artifact based on a contradiction.
 */
interface ContradictionHealthCheckSchema extends CommentSchema {
  type: "contradiction";
  /**
   * The artifacts affected by the contradiction.
   */
  artifactIds: string[];
}

/**
 * Represents a health check on an artifact based on multiple concepts.
 */
interface MultipleConceptHealthCheckSchema extends CommentSchema {
  type: "multi_matched_concept";
  /**
   * The artifact ids of ambiguously matched concepts.
   */
  conceptArtifactIds: string[];
}

/**
 * Represents any type of health check on an artifact.
 */
export type AnyCommentSchema =
  | BasicCommentSchema
  | MatchedConceptHealthCheckSchema
  | UndefinedConceptHealthCheck
  | ContradictionHealthCheckSchema
  | MultipleConceptHealthCheckSchema;

export type CreateCommentSchema = Pick<
  BasicCommentSchema,
  "content" | "type" | "versionId"
>;

export type DisplayableHealthCheckSchema = AnyCommentSchema & {
  /**
   * The color of the health check.
   */
  color: ThemeColor;
  /**
   * The icon of the health check.
   */
  icon: IconVariant;
  /**
   * Artifacts referenced by the health check.
   */
  artifacts: ArtifactSchema[];
  /**
   * Concepts referenced by the health check.
   */
  concepts: string[];
  /**
   * Acts on the health check.
   */
  action?: {
    icon: IconVariant;
    tooltip: string;
    perform(): void;
  };
};

/**
 * Represents a collection of health checks on an artifact.
 */
export interface HealthCheckCollectionSchema {
  /**
   * The health checks on the artifact.
   * type = contradiction, suggestion, unknown_concept, matched_concept, multi_matched_concept
   */
  healthChecks: AnyCommentSchema[];
}

/**
 * Represents a collection of comments and flags on an artifact.
 */
export interface ArtifactCommentsSchema extends HealthCheckCollectionSchema {
  /**
   * The unique identifier of the artifact.
   */
  artifactId: string;
  /**
   * The comments on the artifact.
   * type = conversation
   */
  comments: BasicCommentSchema[];
  /**
   * The flags on the artifact.
   * type = flag
   */
  flags: BasicCommentSchema[];
}
