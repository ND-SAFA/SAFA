description:
  - An API (Application Programming Interface) DataFlow in a software development project
    is a diagram or a representation that illustrates how data moves through various
    interfaces in a system. It is a crucial artifact that helps in understanding the
    flow of data between different software components via APIs. Unlike other software
    artifacts like class diagrams or sequence diagrams that focus on the structure or
    the sequence of operations, an API DataFlow focuses on the movement and transformation
    of data as it interacts with different APIs in the system.
example:
  - 'Consider a software development project for an online shopping platform. One of
  the functionalities could be ''Order Placement''. The API DataFlow for this functionality
  could be as follows:


  1. The user selects items and places an order through the User Interface (UI).

  2. The UI sends a POST request to the ''Order'' API with the order details.

  3. The ''Order'' API interacts with the ''Inventory'' API to check the availability
  of the items.

  4. If the items are available, the ''Order'' API sends a request to the ''Payment''
  API to process the payment.

  5. Once the payment is successful, the ''Order'' API updates the order status and
  sends a response back to the UI.


  This flow shows how data (in this case, order details) moves through different APIs
  (''Order'', ''Inventory'', ''Payment'') in the system.'
format:
  - "## Step 1 \n
  Identify the user action that initiates the data flow \n

  ## Step 2 \n
  Detail the subsequent APIs that the initial API interacts with, the data it sends/receives, and the operations it performs. \n
  - Detail the successful case
  - Detail the failure case (if included)

  ## Step ...  (Continue this process for each API interaction in the flow.) \n

  ## Step N \n
  Finally, describe how the initial API responds back to the user interface. \n"

questions:
  - - What are the main input sources for the system (e.g. files, databases, network
      requests, user input, etc.)?
    - What are the main output destinations for the system (e.g. files, databases, network
      requests, user output, etc.)?
    - What are the key data structures and objects that hold important data in the system?
    - What functions/methods modify or transform the key data structures?
    - What are the parameters and return values for the key data modifying functions/methods?
    - What functions/methods pass data between the input sources and key data structures?
    - What functions/methods pass data from the key data structures to the output destinations?
    - Are there any central controller classes or orchestration logic that manages the
      overall data flow?
    - Are there any major branching points or conditionals that determine data flow
      paths?
    - What are the trust boundaries between privileged vs unprivileged data and code
      execution?
