package edu.nd.crc.safa.features.jobs.entities.jobs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import edu.nd.crc.safa.features.commits.entities.app.ProjectCommit;
import edu.nd.crc.safa.features.common.ServiceProvider;
import edu.nd.crc.safa.features.delta.entities.db.ModificationType;
import edu.nd.crc.safa.features.jobs.entities.IJobStep;
import edu.nd.crc.safa.features.jobs.entities.app.CommitJob;
import edu.nd.crc.safa.features.jobs.entities.db.JobDbEntity;
import edu.nd.crc.safa.features.models.entities.ModelAppEntity;
import edu.nd.crc.safa.features.models.tgen.entities.TraceGenerationRequest;
import edu.nd.crc.safa.features.models.tgen.entities.TracingPayload;
import edu.nd.crc.safa.features.models.tgen.entities.TracingRequest;
import edu.nd.crc.safa.features.models.tgen.generator.TraceGenerationService;
import edu.nd.crc.safa.features.models.tgen.method.bert.TBert;
import edu.nd.crc.safa.features.projects.entities.app.ProjectAppEntity;
import edu.nd.crc.safa.features.traces.entities.app.TraceAppEntity;
import edu.nd.crc.safa.features.traces.entities.db.ApprovalStatus;
import edu.nd.crc.safa.features.traces.entities.db.TraceType;

/**
 * Generates trace links between artifacts defined in request.
 */
public class GenerateLinksJob extends CommitJob {
    /**
     * The request to generate trace links.
     */
    TraceGenerationRequest traceGenerationRequest;
    /**
     * The traces generated by this job.
     */
    List<TraceAppEntity> generatedTraces;
    /**
     * The entities to generate links for.
     */
    ProjectAppEntity projectAppEntity;

    public GenerateLinksJob(JobDbEntity jobDbEntity,
                            ServiceProvider serviceProvider,
                            ProjectCommit projectCommit,
                            TraceGenerationRequest traceGenerationRequest) {
        super(jobDbEntity, serviceProvider, projectCommit);
        this.traceGenerationRequest = traceGenerationRequest;
        this.generatedTraces = new ArrayList<>();
    }

    /**
     * Returns the name of the job.
     *
     * @param traceGenerationRequest The trace generation request being performed by job.
     * @return Job Name.
     */
    public static String getJobName(TraceGenerationRequest traceGenerationRequest) {
        int nArtifactLevels = traceGenerationRequest
            .getRequests()
            .stream()
            .mapToInt(r -> r.getArtifactLevels().size()).sum();
        return String.format("Generating links between %s artifact levels.", nArtifactLevels);
    }

    @IJobStep(value = "Retrieving project data", position = 1)
    public void retrieveTrainingArtifacts() {
        this.projectAppEntity = this.serviceProvider
            .getProjectRetrievalService()
            .getProjectAppEntity(traceGenerationRequest.getProjectVersion());
    }

    @IJobStep(value = "Generating links", position = 2)
    public void generateLinks() {
        for (TracingRequest tracingRequest : traceGenerationRequest.getRequests()) {
            TracingPayload tracingPayload = TraceGenerationService.extractPayload(tracingRequest,
                projectAppEntity);
            if (tracingPayload.getModel() == null) {
                this.generatedTraces = new ArrayList<>();
                this.generatedTraces.addAll(this.serviceProvider
                    .getTraceGenerationService()
                    .generateLinksWithMethod(tracingPayload));
            } else {
                ModelAppEntity model = tracingPayload.getModel();
                TBert bertModel = this.serviceProvider.getBertService().getBertModel(
                    model.getBaseModel(),
                    this.serviceProvider.getSafaRequestBuilder()
                );
                String statePath = model.getStatePath();
                this.generatedTraces = bertModel.generateLinksWithState(
                    statePath,
                    true,
                    tracingPayload);
            }

            // Step - Filter our trace links overriding manual or approved links
            HashMap<String, List<String>> traceHashMap = new HashMap<>();
            this.serviceProvider
                .getTraceService()
                .getAppEntities(projectVersion, t -> t.getApprovalStatus().equals(ApprovalStatus.APPROVED)
                    || t.getTraceType().equals(TraceType.MANUAL))
                .forEach(t -> {
                    if (traceHashMap.containsKey(t.getSourceName())) {
                        traceHashMap.get(t.getSourceName()).add(t.getTargetName());
                    } else {
                        ArrayList<String> targets = new ArrayList<>();
                        targets.add(t.getTargetName());
                        traceHashMap.put(t.getSourceName(), targets);
                    }
                });

            List<TraceAppEntity> filteredGeneratedLinks = this.generatedTraces
                .stream()
                .filter(t -> !traceHashMap.containsKey(t.getSourceName())
                    || !traceHashMap.get(t.getSourceName()).contains(t.getTargetName())).collect(Collectors.toList());

            this.projectCommit.addTraces(ModificationType.ADDED, filteredGeneratedLinks);
        }
    }
}
