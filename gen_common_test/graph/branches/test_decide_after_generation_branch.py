from gen_common.graph.branches.decide_after_generation_branch import DecideAfterGenerationBranch
from gen_common.graph.nodes.supported_nodes import SupportedNodes
from gen_common_test.base.tests.base_test import BaseTest
from gen_common_test.graph.graph_test_util import get_io_without_data


class TestDecideAfterGenerationBranch(BaseTest):

    def test_perform_action_generation(self):
        args, state = get_io_without_data(generation="This is generated by the LLM")
        selection = DecideAfterGenerationBranch(args).perform_action(state)
        self.assertEqual(selection, SupportedNodes.CONTINUE.name)

    def test_perform_action_retrieve(self):
        args, state = get_io_without_data(retrieval_query=["query"])
        selection = DecideAfterGenerationBranch(args).perform_action(state)
        self.assertEqual(selection, SupportedNodes.RETRIEVE.name)

    def test_perform_action_explore(self):
        args, state = get_io_without_data(selected_artifact_ids=["artifact_id"])
        selection = DecideAfterGenerationBranch(args).perform_action(state)
        self.assertEqual(selection, SupportedNodes.EXPLORE_NEIGHBORS.name)
