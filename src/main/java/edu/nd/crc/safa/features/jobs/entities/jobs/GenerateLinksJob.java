package edu.nd.crc.safa.features.jobs.entities.jobs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import edu.nd.crc.safa.features.artifacts.entities.ArtifactAppEntity;
import edu.nd.crc.safa.features.commits.entities.app.ProjectCommit;
import edu.nd.crc.safa.features.commits.services.CommitService;
import edu.nd.crc.safa.features.common.ServiceProvider;
import edu.nd.crc.safa.features.delta.entities.db.ModificationType;
import edu.nd.crc.safa.features.jobs.entities.IJobStep;
import edu.nd.crc.safa.features.jobs.entities.app.CommitJob;
import edu.nd.crc.safa.features.jobs.entities.db.JobDbEntity;
import edu.nd.crc.safa.features.jobs.logging.JobLogger;
import edu.nd.crc.safa.features.models.ITraceGenerationController;
import edu.nd.crc.safa.features.projects.entities.app.ProjectAppEntity;
import edu.nd.crc.safa.features.summary.SummaryService;
import edu.nd.crc.safa.features.tgen.entities.TraceGenerationRequest;
import edu.nd.crc.safa.features.tgen.entities.TracingPayload;
import edu.nd.crc.safa.features.tgen.entities.TracingRequest;
import edu.nd.crc.safa.features.tgen.generator.TraceGenerationService;
import edu.nd.crc.safa.features.tgen.services.LinkScoreService;
import edu.nd.crc.safa.features.tgen.services.LinkVisibilityService;
import edu.nd.crc.safa.features.traces.entities.app.TraceAppEntity;
import edu.nd.crc.safa.features.traces.entities.db.ApprovalStatus;
import edu.nd.crc.safa.features.traces.entities.db.TraceType;
import edu.nd.crc.safa.features.users.entities.db.SafaUser;
import edu.nd.crc.safa.features.versions.entities.ProjectVersion;

/**
 * Generates trace links between artifacts defined in request.
 */
public class GenerateLinksJob extends CommitJob {
    private final SafaUser user;
    /**
     * The request to generate trace links.
     */
    TraceGenerationRequest traceGenerationRequest;
    /**
     * The traces generated by this job.
     */
    List<TraceAppEntity> generatedTraces;
    /**
     * The entities to generate links for.
     */
    ProjectAppEntity projectAppEntity;
    /**
     * The project version to commit summaries and generated links to.
     */
    ProjectVersion projectVersion;

    public GenerateLinksJob(JobDbEntity jobDbEntity,
                            ServiceProvider serviceProvider,
                            ProjectCommit projectCommit,
                            TraceGenerationRequest traceGenerationRequest,
                            SafaUser user) {
        super(jobDbEntity, serviceProvider, projectCommit);
        this.traceGenerationRequest = traceGenerationRequest;
        this.generatedTraces = new ArrayList<>();
        this.user = user;
        this.projectVersion = projectCommit.getCommitVersion();
    }

    /**
     * Returns the name of the job.
     *
     * @param traceGenerationRequest The trace generation request being performed by job.
     * @return Job Name.
     */
    public static String getJobName(TraceGenerationRequest traceGenerationRequest) {
        int nArtifactLevels = traceGenerationRequest
            .getRequests()
            .stream()
            .mapToInt(r -> r.getArtifactLevels().size()).sum();
        return String.format("Generating links between %s artifact levels.", nArtifactLevels);
    }

    @IJobStep(value = "Retrieving project data", position = 1)
    public void retrieveTrainingArtifacts() {
        this.projectAppEntity = this.serviceProvider
            .getProjectRetrievalService()
            .getProjectAppEntity(user, this.projectVersion);
    }

    @IJobStep(value = "Summarizing code artifacts.", position = 2)
    public void createArtifactSummaries() {
        SummaryService summaryService = this.serviceProvider.getSummaryService();
        List<ArtifactAppEntity> modifiedArtifacts =
            summaryService.addSummariesToCode(this.projectAppEntity.getArtifacts());
        CommitService commitService = this.serviceProvider.getCommitService();
        ProjectCommit projectCommit = new ProjectCommit();
        projectCommit.setCommitVersion(this.projectVersion);
        projectCommit.addArtifacts(ModificationType.MODIFIED, modifiedArtifacts);
        commitService.performCommit(projectCommit, this.user);
    }

    @IJobStep(value = "Generating links", position = 3)
    public void generateLinks(JobLogger logger) {
        ProjectCommit projectCommit = getProjectCommit();

        for (TracingRequest tracingRequest : traceGenerationRequest.getRequests()) {
            logger.log("Running tracing request:Levels: %s", tracingRequest.getArtifactLevels());

            TracingPayload tracingPayload = TraceGenerationService.extractPayload(tracingRequest, projectAppEntity);

            ITraceGenerationController controller = this.serviceProvider.getTraceGenerationController();
            List<TraceAppEntity> tracePredictions = controller.generateLinks(tracingPayload, this.getDbLogger());
            LinkVisibilityService.setLinksVisibility(tracePredictions);
            LinkScoreService.convertLinksToPercentiles(tracePredictions);
            this.generatedTraces = tracePredictions;

            logger.log("Generated %d traces.", generatedTraces.size());

            // Step - Filter our trace links overriding manual or approved links
            HashMap<String, List<String>> traceHashMap = new HashMap<>();

            ProjectVersion projectVersion = projectCommit.getCommitVersion();
            this.serviceProvider
                .getTraceService()
                .getAppEntities(projectVersion, user, t -> t.getApprovalStatus() == ApprovalStatus.APPROVED
                    || t.getTraceType() == TraceType.MANUAL)
                .forEach(t -> {
                    if (traceHashMap.containsKey(t.getSourceName())) {
                        traceHashMap.get(t.getSourceName()).add(t.getTargetName());
                    } else {
                        ArrayList<String> targets = new ArrayList<>();
                        targets.add(t.getTargetName());
                        traceHashMap.put(t.getSourceName(), targets);
                    }
                });

            List<TraceAppEntity> filteredGeneratedLinks = this.generatedTraces
                .stream()
                .filter(t -> !traceHashMap.containsKey(t.getSourceName())
                    || !traceHashMap.get(t.getSourceName()).contains(t.getTargetName())).collect(Collectors.toList());

            logger.log("Filtered down to %d traces that will be committed.", filteredGeneratedLinks.size());

            projectCommit.addTraces(ModificationType.ADDED, filteredGeneratedLinks);
            logger.log("\n================\n");
        }

        logger.log("Total links generated: %d", projectCommit.getTraces().getSize());
    }
}
