package edu.nd.crc.safa.features.jobs.entities.jobs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import edu.nd.crc.safa.features.artifacts.entities.ArtifactAppEntity;
import edu.nd.crc.safa.features.commits.entities.app.ProjectCommit;
import edu.nd.crc.safa.features.common.ServiceProvider;
import edu.nd.crc.safa.features.delta.entities.db.ModificationType;
import edu.nd.crc.safa.features.jobs.entities.IJobStep;
import edu.nd.crc.safa.features.jobs.entities.app.CommitJob;
import edu.nd.crc.safa.features.jobs.entities.db.JobDbEntity;
import edu.nd.crc.safa.features.models.entities.ModelAppEntity;
import edu.nd.crc.safa.features.tgen.entities.BaseGenerationModels;
import edu.nd.crc.safa.features.tgen.entities.TraceGenerationRequest;
import edu.nd.crc.safa.features.tgen.method.bert.TBert;
import edu.nd.crc.safa.features.traces.entities.app.TraceAppEntity;
import edu.nd.crc.safa.features.traces.entities.db.ApprovalStatus;
import edu.nd.crc.safa.features.traces.entities.db.TraceType;

/**
 * Generates trace links between artifacts defined in request.
 */
public class GenerateLinksJob extends CommitJob {
    /**
     * The request to generate trace links.
     */
    TraceGenerationRequest request;
    /**
     * The traces generated by this job.
     */
    List<TraceAppEntity> generatedTraces;

    public GenerateLinksJob(JobDbEntity jobDbEntity,
                            ServiceProvider serviceProvider,
                            ProjectCommit projectCommit,
                            TraceGenerationRequest request) {
        super(jobDbEntity, serviceProvider, projectCommit);
        this.request = request;
        this.generatedTraces = new ArrayList<>();
    }

    /**
     * Returns the name of the job.
     *
     * @param request The trace generation request being performed by job.
     * @return Job Name.
     */
    public static String getJobName(TraceGenerationRequest request) {
        String method = request.getModel() == null ? request.getMethod().toString() : request.getModel().getName();
        return String.format("Generating %s links with %s.", request.size(), method);
    }

    @IJobStep(value = "Generating links", position = 1)
    public void generateLinks() {
        if (this.request.size() == 0) {
            return;
        }
        List<ArtifactAppEntity> sourceArtifacts = request.getSourceArtifacts();
        List<ArtifactAppEntity> targetArtifacts = request.getTargetArtifacts();
        System.out.println("Request:" + request);
        BaseGenerationModels method = request.getMethod();
        if (request.getModel() == null) {
            this.generatedTraces = this.serviceProvider
                .getTraceGenerationService()
                .generateLinksWithMethod(sourceArtifacts, targetArtifacts, method);
        } else {
            ModelAppEntity model = request.getModel();
            TBert bertModel = this.serviceProvider.getBertService().getBertModel(
                model.getBaseModel(),
                this.serviceProvider.getSafaRequestBuilder()
            );
            String statePath = model.getStatePath(projectVersion.getProject());
            this.generatedTraces = bertModel.generateLinksWithState(
                statePath,
                true,
                sourceArtifacts,
                targetArtifacts);
        }

        // Step - Filter our trace links overriding manual or approved links
        HashMap<String, List<String>> traceHashMap = new HashMap<>();
        this.serviceProvider
            .getTraceService()
            .getAppEntities(projectVersion, t -> t.getApprovalStatus().equals(ApprovalStatus.APPROVED)
                || t.getTraceType().equals(TraceType.MANUAL))
            .forEach(t -> {
                if (traceHashMap.containsKey(t.getSourceName())) {
                    traceHashMap.get(t.getSourceName()).add(t.getTargetName());
                } else {
                    ArrayList<String> targets = new ArrayList<>();
                    targets.add(t.getTargetName());
                    traceHashMap.put(t.getSourceName(), targets);
                }
            });

        List<TraceAppEntity> filteredGeneratedLinks = this.generatedTraces
            .stream()
            .filter(t -> !traceHashMap.containsKey(t.getSourceName())
                || !traceHashMap.get(t.getSourceName()).contains(t.getTargetName())).collect(Collectors.toList());
        System.out.println("End:" + filteredGeneratedLinks.size());

        this.projectCommit.addTraces(ModificationType.ADDED, filteredGeneratedLinks);
    }
}
