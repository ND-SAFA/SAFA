buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE'
        classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
    }

}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

bootJar {
    baseName = 'edu.nd.crc.safa'
    version = '0.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // mandatory dependencies for using Spock
    compile 'org.codehaus.groovy:groovy-all:2.5.7'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'

    compile 'org.neo4j.driver:neo4j-java-driver:4.3.3'
    compile 'mysql:mysql-connector-java:8.0.15'
    compile 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.3.1'

    compile 'com.jsoniter:jsoniter:0.9.23'
    compile 'org.javatuples:javatuples:1.2'
    compile 'org.eclipse.jgit:org.eclipse.jgit:5.5.1.201910021850-r'

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.1.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot:2.1.6.RELEASE'
    implementation 'org.springframework:spring-beans:5.1.8.RELEASE'
    implementation 'org.springframework:spring-context:5.1.8.RELEASE'
    implementation 'org.springframework:spring-tx:5.1.8.RELEASE'
    implementation 'org.springframework:spring-web:5.1.8.RELEASE'
    implementation 'org.springframework:spring-webmvc:5.1.8.RELEASE'
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '2.3.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    testImplementation 'org.codehaus.groovy:groovy:2.5.7'
}

task myTask(type: Exec) {

}

test {
    if (file('.env').exists()) {
        file('.env').readLines().each() {
            def (key, value) = it.tokenize('=')
            if (value != "") {
                environment key, value
                print("adding {" + key + "} to env\n")
            }
        }
    }

    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
    finalizedBy jacocoTestCoverageVerification
}


/*
 * CI/CD
 */

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0
            }
        }
    }
}

checkstyle {
    toolVersion = '8.11'
    configFile = file("${project.rootDir}/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

