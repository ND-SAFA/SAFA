"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os.path
import sys

from kombu.serialization import register

from .paths import load_source_code_paths

load_source_code_paths()

from tgen.common.constants import anthropic_constants
from tgen.common.logging.logger_manager import logger
from tgen.common.util.json_util import NpEncoder

from pathlib import Path
from socket import gethostbyname
from socket import gethostname
from dotenv import load_dotenv

load_dotenv()

ENV_NAME = os.environ.get("ENV_MODE", "production")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY", None)
ROOT_PASSWORD = os.environ.get("ROOT_PASSWORD", None)
JWT_ALGO = "HS256"

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'drf_yasg'
]

MIDDLEWARE = [
    # CORS
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Default
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'api.server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# TGEN Configuration
anthropic_constants.ANTHROPIC_MAX_THREADS = int(os.environ.get("MAX_THREADS", 10))
anthropic_constants.ANTHROPIC_MAX_RPM = anthropic_constants.ANTHROPIC_MAX_THREADS * 12

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STORAGES = {
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    },
}
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
APPEND_SLASH = True
CSRF_COOKIE_SECURE = False
CORS_ALLOWED_ORIGINS = [
    "https://localhost:3000",
    "https://api.safa.ai",
    "https://dev.api.safa.ai",
    "https://staging.api.safa.ai"
]

FAILURE_PATHS = {"test": "~/server_output"}
ENV_FAILURE_PATH = FAILURE_PATHS.get(ENV_NAME, "/")
# Request Encoder/Decoer
register('NpEncoder',
         encoder=lambda obj: json.dumps(obj, cls=NpEncoder),
         decoder=lambda obj: json.loads(obj),
         content_type='application/x-myjson',
         content_encoding='utf-8')
"""
Celery Configuration Options

https://docs.celeryq.dev/en/stable/index.html
TODO: broker_connection_retry_on_startup needs to be set
"""

CELERY_TIMEZONE = "America/New_York"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 1440 * 60  # 1 Day
CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_TASK_ALWAYS_EAGER = ENV_NAME.lower() == "test"
CELERY_EAGER_PROPAGATES_EXCEPTIONS = CELERY_TASK_ALWAYS_EAGER

DEBUG = True if ENV_NAME.lower() == "test" else False

DATA_UPLOAD_MAX_MEMORY_SIZE = 25_000_000
CELERY_ACCEPT_CONTENT = ['NpEncoder']
CELERY_TASK_SERIALIZER = 'NpEncoder'
CELERY_RESULT_SERIALIZER = 'NpEncoder'
GEN_BROKER = os.environ.get("BROKER", "celery")

if GEN_BROKER == "celery":
    from celery_s3.backends import S3Backend

    base_path = f"/{ENV_NAME}"
    CELERY_RESULT_BACKEND = 'celery_s3.backends.S3Backend'
    CELERY_S3_BACKEND_SETTINGS = {
        'aws_access_key_id': f'{os.environ.get("BACKEND_ACCESS_ID", "")}',
        'aws_secret_access_key': f'{os.environ.get("BACKEND_SECRET_KEY", "")}',
        'bucket': f'{os.environ.get("BACKEND_BUCKET_NAME", "")}',
        'reduced_redundancy': True,
        'base_path': bytes(base_path, "utf-8")  # See `Rabbit Hole Fix`
    }
    print("using s3 for back-end.")
""""
FootNotes:

# Rabbit Hole Fix
S3 Backend uses os.path.join on the bucket name, however, bucket name is in bytes resulting in a type mismatch error.
Therefore, to not have to re-write the s3 backend we are converting to bytes here since it is directly used without modification
in their code.
"""
if DEBUG:
    BAR = "-" * 25
    logger.info(f"{BAR}\tSystem Information\t{BAR}")
    logger.info("Running in debug mode.")
    logger.info(f"CELERY_TASK_ALWAYS_EAGER: {CELERY_TASK_ALWAYS_EAGER}")
    logger.info(f"Environment: {ENV_NAME}")
    logger.info(f"Static root path: {STATIC_ROOT}")
    logger.info(f"Failure Path: {ENV_FAILURE_PATH}")
    logger.info(f"Concurrent requests: {anthropic_constants.ANTHROPIC_MAX_THREADS}")

if ENV_NAME == "test":
    CORS_ALLOWED_ORIGINS = ["https://localhost:3000"]
if ENV_NAME == "development":
    CORS_ALLOWED_ORIGINS = ["https://localhost:3000"]
    DEBUG = True
