description:
- Business Logic in a software development project refers to the custom rules or algorithms
  that handle the exchange of information between a database and a user interface.
  It is the part of the program that determines how data can be created, displayed,
  stored, and changed. It is different from other software artifacts as it is not
  concerned with the look and feel of the application (presentation logic) or with
  the data storage and retrieval (data access logic). Instead, it focuses on the "business
  rules" that govern how the data is processed or transformed.
example:
- "For an online shopping application, a business logic could be the process of checking\
  \ out a shopping cart. This process could include the following steps: \n1. The\
  \ user selects the 'Checkout' button.\n2. The system verifies that the shopping\
  \ cart is not empty.\n3. The system calculates the total cost of the items in the\
  \ cart.\n4. The system checks if the user is logged in.\n5. If the user is not logged\
  \ in, the system prompts the user to log in or register.\n6. The system prompts\
  \ the user to enter shipping and payment information.\n7. The system processes the\
  \ payment.\n8. If the payment is successful, the system updates the inventory and\
  \ sends a confirmation email to the user.\n9. If the payment is not successful,\
  \ the system notifies the user and prompts them to enter a new payment method."
format:
- '- User action: Describe the action that the user takes to initiate the process.

  - System response: Describe what the system does in response to the user''s action.

  - Condition: Describe any conditions that must be met for the system to proceed
  with the process.

  - System action: Describe the actions that the system takes to process the data.

  - Outcome: Describe the final result of the process, including any changes to the
  data and any notifications or confirmations sent to the user.'
questions:
- - What are the main functions/methods in the code and what do they do?
  - What are the key data structures and how are they used?
  - What are the main input sources and output destinations?
  - What are the key parameters or configuration values that affect behavior?
  - Are there any important branching or decision points that change the flow?
  - Are there any important events or triggers that cause different behavior?
  - What external services, databases, etc. does the code interact with?
  - What assumptions does the code make about its environment or context?
  - What security or access controls are enforced in the code?
  - What logging, telemetry or diagnostics are present?
